syntax = "proto3";

package ledger;
option go_package = "example.com/go-mono-repo/proto/ledger";

// Spec: docs/specs/001-manifest.md
service Manifest {
  // GetManifest returns comprehensive service metadata
  rpc GetManifest (ManifestRequest) returns (ManifestResponse) {}
}

// The empty request
message ManifestRequest {
}

// The response message containing comprehensive service metadata
// Spec: docs/specs/001-manifest.md
message ManifestResponse {
  // Service identity
  ServiceIdentity identity = 1;
  
  // Build information
  BuildInfo build_info = 2;
  
  // Runtime information
  RuntimeInfo runtime_info = 3;
  
  // Service metadata
  ServiceMetadata metadata = 4;
  
  // Service capabilities
  ServiceCapabilities capabilities = 5;
}

message ServiceIdentity {
  string name = 1;              // Service name (e.g., "ledger-service")
  string version = 2;           // Semantic version (e.g., "1.2.3")
  string api_version = 3;       // API version (e.g., "v1")
  string description = 4;       // Brief service description
}

message BuildInfo {
  string commit_hash = 1;       // Git commit SHA
  string branch = 2;            // Git branch name
  string build_time = 3;        // RFC3339 timestamp
  string builder = 4;           // CI system or user
  bool is_dirty = 5;           // Whether build had uncommitted changes
}

message RuntimeInfo {
  string instance_id = 1;       // Unique instance identifier
  string hostname = 2;          // Host machine name
  string started_at = 3;        // RFC3339 timestamp
  string environment = 4;       // Environment (dev/staging/prod)
  string region = 5;            // Deployment region/zone
  int64 uptime_seconds = 6;    // Seconds since start
}

message ServiceMetadata {
  string owner = 1;             // Team or owner email
  string repository_url = 2;    // Source code repository
  string documentation_url = 3; // Service documentation
  string support_contact = 4;   // Support contact info
  map<string, string> labels = 5; // Additional labels/tags
}

message ServiceCapabilities {
  repeated string api_versions = 1;     // Supported API versions
  repeated string protocols = 2;        // Supported protocols (grpc, http)
  repeated string features = 3;         // Enabled feature flags
  repeated ServiceDependency dependencies = 4; // Required services
}

message ServiceDependency {
  string name = 1;              // Dependency service name
  string version = 2;           // Required version (semver range)
  bool is_optional = 3;         // Whether dependency is optional
}

// ============================================================================
// Health Check and Liveness Service
// Spec: docs/specs/003-health-check-liveness.md
// ============================================================================

service Health {
  // GetLiveness checks if the service is alive and ready to accept traffic
  // Should be used by load balancers and orchestrators
  // Spec: docs/specs/003-health-check-liveness.md#story-1-service-liveness-check
  rpc GetLiveness (LivenessRequest) returns (LivenessResponse) {}
  
  // GetHealth performs comprehensive health check including dependencies
  // Should be used for monitoring and debugging
  // Spec: docs/specs/003-health-check-liveness.md#story-2-dependency-health-monitoring
  rpc GetHealth (HealthRequest) returns (HealthResponse) {}
}

message LivenessRequest {
  // No fields required - liveness is binary
}

message LivenessResponse {
  // Overall liveness status
  ServiceStatus status = 1;
  
  // Human-readable message
  string message = 2;
  
  // Component readiness checks
  repeated ComponentCheck checks = 3;
  
  // Timestamp of the check
  string checked_at = 4;  // RFC3339 format
}

message HealthRequest {
  // Include detailed dependency info
  bool include_details = 1;
  
  // Check specific dependencies only
  repeated string dependency_filter = 2;
}

message HealthResponse {
  // Overall health status
  ServiceStatus status = 1;
  
  // Human-readable message
  string message = 2;
  
  // Service liveness (internal readiness)
  LivenessInfo liveness = 3;
  
  // Dependency health checks
  repeated DependencyHealth dependencies = 4;
  
  // Timestamp of the check
  string checked_at = 5;  // RFC3339 format
  
  // Time taken to perform all checks (milliseconds)
  int64 check_duration_ms = 6;
}

enum ServiceStatus {
  // Service is fully operational
  HEALTHY = 0;
  
  // Service is operational but with non-critical issues
  DEGRADED = 1;
  
  // Service is not operational
  UNHEALTHY = 2;
}

message ComponentCheck {
  // Component name (e.g., "config", "database_pool", "cache")
  string name = 1;
  
  // Component status
  bool ready = 2;
  
  // Optional message
  string message = 3;
}

message LivenessInfo {
  // Is service ready to accept traffic
  bool is_alive = 1;
  
  // Service initialization status
  bool config_loaded = 2;
  bool pools_ready = 3;
  bool cache_warmed = 4;
  
  // Custom readiness checks
  repeated ComponentCheck components = 5;
}

message DependencyHealth {
  // Dependency name (e.g., "postgres", "redis", "user-service")
  string name = 1;
  
  // Dependency type
  DependencyType type = 2;
  
  // Health status
  ServiceStatus status = 3;
  
  // Is this dependency critical for service operation
  bool is_critical = 4;
  
  // Human-readable status message
  string message = 5;
  
  // Configuration details (non-sensitive)
  DependencyConfig config = 6;
  
  // Last successful check timestamp
  string last_success = 7;  // RFC3339 format
  
  // Last check timestamp
  string last_check = 8;  // RFC3339 format
  
  // Response time of health check (milliseconds)
  int64 response_time_ms = 9;
  
  // Error details if unhealthy
  string error = 10;
}

enum DependencyType {
  DATABASE = 0;
  CACHE = 1;
  MESSAGE_QUEUE = 2;
  GRPC_SERVICE = 3;
  HTTP_SERVICE = 4;
  STORAGE = 5;
  OTHER = 6;
}

message DependencyConfig {
  // Connection information (non-sensitive)
  string hostname = 1;
  int32 port = 2;
  string protocol = 3;  // e.g., "grpc", "http", "postgres"
  
  // Database/schema/topic information
  string database_name = 4;
  string schema_name = 5;
  string topic_name = 6;
  
  // Connection pool information
  ConnectionPoolInfo pool_info = 7;
  
  // Service version if applicable
  string version = 8;
  
  // Additional metadata
  map<string, string> metadata = 9;
}

message ConnectionPoolInfo {
  int32 max_connections = 1;
  int32 active_connections = 2;
  int32 idle_connections = 3;
  int32 wait_count = 4;
  int64 wait_duration_ms = 5;
}
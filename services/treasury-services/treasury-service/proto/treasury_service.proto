syntax = "proto3";

package treasury;

import "google/protobuf/timestamp.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/struct.proto";

option go_package = "example.com/go-mono-repo/proto/treasury";

// Spec: docs/specs/001-manifest.md
service Manifest {
  // GetManifest returns comprehensive service metadata
  rpc GetManifest (ManifestRequest) returns (ManifestResponse) {}
}

message ManifestRequest {
  // No fields required - manifest is always the same for an instance
}

message ManifestResponse {
  // Service identity
  ServiceIdentity identity = 1;
  
  // Build information
  BuildInfo build_info = 2;
  
  // Runtime information
  RuntimeInfo runtime_info = 3;
  
  // Service metadata
  ServiceMetadata metadata = 4;
  
  // Service capabilities
  ServiceCapabilities capabilities = 5;
}

message ServiceIdentity {
  string name = 1;              // Service name (e.g., "treasury-service")
  string version = 2;           // Semantic version (e.g., "1.2.3")
  string api_version = 3;       // API version (e.g., "v1")
  string description = 4;       // Brief service description
}

message BuildInfo {
  string commit_hash = 1;       // Git commit SHA
  string branch = 2;            // Git branch name
  string build_time = 3;        // RFC3339 timestamp
  string builder = 4;           // CI system or user
  bool is_dirty = 5;           // Whether build had uncommitted changes
}

message RuntimeInfo {
  string instance_id = 1;       // Unique instance identifier
  string hostname = 2;          // Host machine name
  string started_at = 3;        // RFC3339 timestamp
  string environment = 4;       // Environment (dev/staging/prod)
  string region = 5;            // Deployment region/zone
  int64 uptime_seconds = 6;    // Seconds since start
}

message ServiceMetadata {
  string owner = 1;             // Team or owner email
  string repository_url = 2;    // Source code repository
  string documentation_url = 3; // Service documentation
  string support_contact = 4;   // Support contact info
  map<string, string> labels = 5; // Additional labels/tags
}

message ServiceCapabilities {
  repeated string api_versions = 1;     // Supported API versions
  repeated string protocols = 2;        // Supported protocols (grpc, http)
  repeated string features = 3;         // Enabled feature flags
  repeated ServiceDependency dependencies = 4; // Required services
}

message ServiceDependency {
  string name = 1;              // Dependency service name
  string version = 2;           // Required version (semver range)
  bool is_optional = 3;         // Whether dependency is optional
}

// ============================================================================
// Health Check and Liveness Service
// Spec: docs/specs/003-health-check-liveness.md
// ============================================================================

service Health {
  // GetLiveness checks if the service is alive and ready to accept traffic
  // Should be used by load balancers and orchestrators
  // Spec: docs/specs/003-health-check-liveness.md#story-1-service-liveness-check
  rpc GetLiveness (LivenessRequest) returns (LivenessResponse) {}
  
  // GetHealth performs comprehensive health check including dependencies
  // Should be used for monitoring and debugging
  // Spec: docs/specs/003-health-check-liveness.md#story-2-dependency-health-monitoring
  rpc GetHealth (HealthRequest) returns (HealthResponse) {}
}

message LivenessRequest {
  // No fields required - liveness is binary
}

message LivenessResponse {
  // Overall liveness status
  ServiceStatus status = 1;
  
  // Human-readable message
  string message = 2;
  
  // Component readiness checks
  repeated ComponentCheck checks = 3;
  
  // Timestamp of the check
  string checked_at = 4;  // RFC3339 format
}

message HealthRequest {
  // Include detailed dependency info
  bool include_details = 1;
  
  // Check specific dependencies only
  repeated string dependency_filter = 2;
}

message HealthResponse {
  // Overall health status
  ServiceStatus status = 1;
  
  // Human-readable message
  string message = 2;
  
  // Service liveness (internal readiness)
  LivenessInfo liveness = 3;
  
  // Dependency health checks
  repeated DependencyHealth dependencies = 4;
  
  // Timestamp of the check
  string checked_at = 5;  // RFC3339 format
  
  // Time taken to perform all checks (milliseconds)
  int64 check_duration_ms = 6;
}

enum ServiceStatus {
  // Service is fully operational
  HEALTHY = 0;
  
  // Service is operational but with non-critical issues
  DEGRADED = 1;
  
  // Service is not operational
  UNHEALTHY = 2;
}

message ComponentCheck {
  // Component name (e.g., "config", "database_pool", "cache")
  string name = 1;
  
  // Component status
  bool ready = 2;
  
  // Optional message
  string message = 3;
}

message LivenessInfo {
  // Is service ready to accept traffic
  bool is_alive = 1;
  
  // Service initialization status
  bool config_loaded = 2;
  bool pools_ready = 3;
  bool cache_warmed = 4;
  
  // Custom readiness checks
  repeated ComponentCheck components = 5;
}

message DependencyHealth {
  // Dependency name (e.g., "postgres", "redis", "user-service")
  string name = 1;
  
  // Dependency type
  DependencyType type = 2;
  
  // Health status
  ServiceStatus status = 3;
  
  // Is this dependency critical for service operation
  bool is_critical = 4;
  
  // Human-readable status message
  string message = 5;
  
  // Configuration details (non-sensitive)
  DependencyConfig config = 6;
  
  // Last successful check timestamp
  string last_success = 7;  // RFC3339 format
  
  // Last check timestamp
  string last_check = 8;  // RFC3339 format
  
  // Response time of health check (milliseconds)
  int64 response_time_ms = 9;
  
  // Error details if unhealthy
  string error = 10;
}

enum DependencyType {
  DATABASE = 0;
  CACHE = 1;
  MESSAGE_QUEUE = 2;
  GRPC_SERVICE = 3;
  HTTP_SERVICE = 4;
  STORAGE = 5;
  OTHER = 6;
}

message DependencyConfig {
  // Connection information (non-sensitive)
  string hostname = 1;
  int32 port = 2;
  string protocol = 3;  // e.g., "grpc", "http", "postgres"
  
  // Database/schema/topic information
  string database_name = 4;
  string schema_name = 5;
  string topic_name = 6;
  
  // Connection pool information
  ConnectionPoolInfo pool_info = 7;
  
  // Service version if applicable
  string version = 8;
  
  // Additional metadata
  map<string, string> metadata = 9;
}

message ConnectionPoolInfo {
  int32 max_connections = 1;
  int32 active_connections = 2;
  int32 idle_connections = 3;
  int32 wait_count = 4;
  int64 wait_duration_ms = 5;
}

// ============================================================================
// Currency Management Service
// Spec: docs/specs/003-currency-management.md
// ============================================================================

// Currency service for managing ISO 4217 compliant currencies
service CurrencyService {
  // Create a new currency
  // Spec: docs/specs/003-currency-management.md#story-1-create-new-currency
  rpc CreateCurrency(CreateCurrencyRequest) returns (CreateCurrencyResponse);
  
  // Get currency information
  // Spec: docs/specs/003-currency-management.md#story-2-query-currency-information
  rpc GetCurrency(GetCurrencyRequest) returns (GetCurrencyResponse);
  
  // Update currency metadata
  // Spec: docs/specs/003-currency-management.md#story-3-update-currency-metadata
  rpc UpdateCurrency(UpdateCurrencyRequest) returns (UpdateCurrencyResponse);
  
  // Deactivate currency (soft delete only - hard delete not supported)
  // Spec: docs/specs/003-currency-management.md#story-4-deactivate-currency
  rpc DeactivateCurrency(DeactivateCurrencyRequest) returns (DeactivateCurrencyResponse);
  
  // List currencies with filters
  // Spec: docs/specs/003-currency-management.md#story-2-query-currency-information
  rpc ListCurrencies(ListCurrenciesRequest) returns (ListCurrenciesResponse);
  
  // Bulk create currencies
  // Spec: docs/specs/003-currency-management.md#story-5-bulk-currency-operations
  rpc BulkCreateCurrencies(BulkCreateCurrenciesRequest) returns (BulkCreateCurrenciesResponse);
}

// Currency represents an ISO 4217 compliant currency
message Currency {
  string id = 1;                              // UUID
  string code = 2;                            // ISO 4217 code (USD, EUR)
  string numeric_code = 3;                    // ISO 4217 numeric code
  string name = 4;                            // Official name
  int32 minor_units = 5;                      // Decimal places
  string symbol = 6;                          // Currency symbol
  string symbol_position = 7;                 // before/after
  repeated string country_codes = 8;          // ISO 3166 codes
  bool is_active = 9;                         // Active status
  bool is_crypto = 10;                        // Cryptocurrency flag
  CurrencyStatus status = 11;                 // Current status
  google.protobuf.Timestamp activated_at = 12;
  google.protobuf.Timestamp deactivated_at = 13;
  google.protobuf.Timestamp created_at = 14;
  google.protobuf.Timestamp updated_at = 15;
  string created_by = 16;
  string updated_by = 17;
  int32 version = 18;                         // Optimistic locking
}

enum CurrencyStatus {
  CURRENCY_STATUS_UNSPECIFIED = 0;
  CURRENCY_STATUS_ACTIVE = 1;
  CURRENCY_STATUS_INACTIVE = 2;
  CURRENCY_STATUS_DEPRECATED = 3;
  CURRENCY_STATUS_DELETED = 4;
}

// Request/Response messages
message CreateCurrencyRequest {
  string code = 1;                            // Required
  string numeric_code = 2;                    // Optional
  string name = 3;                            // Required
  int32 minor_units = 4;                      // Default 2
  string symbol = 5;
  repeated string country_codes = 6;
  bool is_crypto = 7;
}

message CreateCurrencyResponse {
  Currency currency = 1;
}

message GetCurrencyRequest {
  oneof identifier {
    string code = 1;                        // Primary lookup
    string numeric_code = 2;                // Alternative lookup
    string id = 3;                          // UUID lookup
  }
}

message GetCurrencyResponse {
  Currency currency = 1;
}

message UpdateCurrencyRequest {
  string code = 1;                            // Required (identifies currency)
  google.protobuf.FieldMask update_mask = 2;  // Fields to update
  string name = 3;
  int32 minor_units = 4;
  string symbol = 5;
  repeated string country_codes = 6;
  CurrencyStatus status = 7;
  int32 version = 8;                          // For optimistic locking
}

message UpdateCurrencyResponse {
  Currency currency = 1;
}

message DeactivateCurrencyRequest {
  string code = 1;                            // Required
  CurrencyStatus status = 2;                  // New status (inactive/deprecated/deleted)
  string updated_by = 3;                      // User making the change
  int32 version = 4;                          // For optimistic locking
}

message DeactivateCurrencyResponse {
  bool success = 1;
  Currency currency = 2;                      // Updated currency
}

message ListCurrenciesRequest {
  CurrencyStatus status = 1;                  // Filter by status
  bool is_active = 2;                         // Filter by active flag
  bool is_crypto = 3;                         // Filter cryptocurrencies
  string country_code = 4;                    // Filter by country
  int32 page_size = 5;                        // Pagination
  string page_token = 6;                      // Pagination token
}

message ListCurrenciesResponse {
  repeated Currency currencies = 1;
  string next_page_token = 2;
  int32 total_count = 3;
}

message BulkCreateCurrenciesRequest {
  repeated CreateCurrencyRequest currencies = 1;
  bool skip_duplicates = 2;                   // Skip existing currencies
  bool update_existing = 3;                   // Update if exists
}

message BulkCreateCurrenciesResponse {
  int32 created_count = 1;
  int32 updated_count = 2;
  int32 skipped_count = 3;
  repeated string errors = 4;
}

// ============================================================================
// Financial Institutions Management Service
// Spec: docs/specs/004-financial-institutions.md
// ============================================================================

// Financial institutions management service
service FinancialInstitutionService {
  // Create a new financial institution
  // Spec: docs/specs/004-financial-institutions.md#story-1-create-new-financial-institution
  rpc CreateInstitution(CreateInstitutionRequest) returns (CreateInstitutionResponse);
  
  // Get institution information
  // Spec: docs/specs/004-financial-institutions.md#story-2-query-financial-institution-information
  rpc GetInstitution(GetInstitutionRequest) returns (GetInstitutionResponse);
  
  // Update institution metadata
  // Spec: docs/specs/004-financial-institutions.md#story-3-update-institution-information
  rpc UpdateInstitution(UpdateInstitutionRequest) returns (UpdateInstitutionResponse);
  
  // Delete institution (with reference checking)
  // Spec: docs/specs/004-financial-institutions.md#story-4-deactivate-financial-institution
  rpc DeleteInstitution(DeleteInstitutionRequest) returns (DeleteInstitutionResponse);
  
  // List institutions with filters
  // Spec: docs/specs/004-financial-institutions.md#story-2-query-financial-institution-information
  rpc ListInstitutions(ListInstitutionsRequest) returns (ListInstitutionsResponse);
  
  // Check for references before deletion
  // Spec: docs/specs/004-financial-institutions.md#story-4-deactivate-financial-institution
  rpc CheckInstitutionReferences(CheckInstitutionReferencesRequest) returns (CheckInstitutionReferencesResponse);
  
  // Bulk create institutions
  // Spec: docs/specs/004-financial-institutions.md#story-5-bulk-institution-operations
  rpc BulkCreateInstitutions(BulkCreateInstitutionsRequest) returns (BulkCreateInstitutionsResponse);
}

// RoutingNumber represents a routing number for an institution
message RoutingNumber {
  string id = 1;                              // UUID
  string routing_number = 2;                  // 9-digit routing number
  string routing_type = 3;                    // standard, wire, ach, fedwire, other
  bool is_primary = 4;                        // Primary routing number flag
  string description = 5;                     // Optional description
  google.protobuf.Timestamp created_at = 6;
  google.protobuf.Timestamp updated_at = 7;
}

// FinancialInstitution represents a banking institution
message FinancialInstitution {
  string id = 1;                              // UUID
  string code = 2;                            // Unique institution code
  string name = 3;                            // Official name
  string short_name = 4;                      // Display name
  
  // US Banking identifiers (supports multiple routing numbers)
  repeated RoutingNumber routing_numbers = 5;  // List of routing numbers
  
  // International identifiers
  string swift_code = 6;                      // SWIFT/BIC code
  string iban_prefix = 7;                     // IBAN prefix
  string bank_code = 8;                       // National bank code
  string branch_code = 9;                     // Branch code
  
  // Institution details
  InstitutionType institution_type = 10;
  string country_code = 11;                   // ISO 3166-1 alpha-2
  string primary_currency = 12;               // ISO 4217 code
  
  // Address
  Address address = 13;
  
  // Contact
  ContactInfo contact = 14;
  
  // Operational
  string time_zone = 15;
  google.protobuf.Struct business_hours = 16;
  string holiday_calendar = 17;
  
  // Regulatory
  string regulatory_id = 18;
  string tax_id = 19;
  google.protobuf.Struct licenses = 20;
  
  // Status
  InstitutionStatus status = 21;
  bool is_active = 22;
  google.protobuf.Timestamp activated_at = 23;
  google.protobuf.Timestamp deactivated_at = 24;
  string suspension_reason = 25;
  
  // Metadata
  google.protobuf.Struct capabilities = 26;
  string notes = 27;
  google.protobuf.Struct external_references = 28;
  
  // Audit
  google.protobuf.Timestamp created_at = 29;
  google.protobuf.Timestamp updated_at = 30;
  string created_by = 31;
  string updated_by = 32;
  int32 version = 33;
}

enum InstitutionType {
  INSTITUTION_TYPE_UNSPECIFIED = 0;
  INSTITUTION_TYPE_BANK = 1;
  INSTITUTION_TYPE_CREDIT_UNION = 2;
  INSTITUTION_TYPE_INVESTMENT_BANK = 3;
  INSTITUTION_TYPE_CENTRAL_BANK = 4;
  INSTITUTION_TYPE_SAVINGS_BANK = 5;
  INSTITUTION_TYPE_ONLINE_BANK = 6;
  INSTITUTION_TYPE_OTHER = 7;
}

enum InstitutionStatus {
  INSTITUTION_STATUS_UNSPECIFIED = 0;
  INSTITUTION_STATUS_ACTIVE = 1;
  INSTITUTION_STATUS_INACTIVE = 2;
  INSTITUTION_STATUS_SUSPENDED = 3;
  INSTITUTION_STATUS_DELETED = 4;
}

message Address {
  string street_address_1 = 1;
  string street_address_2 = 2;
  string city = 3;
  string state_province = 4;
  string postal_code = 5;
  string country_code = 6;
}

message ContactInfo {
  string phone_number = 1;
  string fax_number = 2;
  string email_address = 3;
  string website_url = 4;
}

// Request/Response messages for FinancialInstitutionService
message CreateInstitutionRequest {
  string code = 1;                            // Required, unique
  string name = 2;                            // Required
  string short_name = 3;
  
  // Support for multiple routing numbers
  message RoutingNumberInput {
    string routing_number = 1;
    string routing_type = 2;                // standard, wire, ach, fedwire, other
    bool is_primary = 3;
    string description = 4;
  }
  repeated RoutingNumberInput routing_numbers = 4; // US banks routing numbers
  
  string swift_code = 5;                      // Required for international
  string bank_code = 6;
  string branch_code = 7;
  InstitutionType institution_type = 8;       // Required
  string country_code = 9;                    // Required
  string primary_currency = 10;
  Address address = 11;
  ContactInfo contact = 12;
  string time_zone = 13;
  google.protobuf.Struct capabilities = 14;
  string notes = 15;
}

message CreateInstitutionResponse {
  FinancialInstitution institution = 1;
}

message GetInstitutionRequest {
  oneof identifier {
    string code = 1;                        // Primary lookup
    string routing_number = 2;              // US routing lookup
    string swift_code = 3;                  // International lookup
    string id = 4;                          // UUID lookup
  }
}

message GetInstitutionResponse {
  FinancialInstitution institution = 1;
}

message UpdateInstitutionRequest {
  string code = 1;                            // Required (identifies institution)
  google.protobuf.FieldMask update_mask = 2;  // Fields to update
  string name = 3;
  string short_name = 4;
  
  // For updating routing numbers
  message RoutingNumberUpdate {
    string routing_number = 1;
    string routing_type = 2;
    bool is_primary = 3;
    string description = 4;
  }
  repeated RoutingNumberUpdate routing_numbers = 5; // Replace all routing numbers
  
  string swift_code = 6;
  Address address = 7;
  ContactInfo contact = 8;
  InstitutionStatus status = 9;
  google.protobuf.Struct capabilities = 10;
  string notes = 11;
  int32 version = 12;                         // For optimistic locking
}

message UpdateInstitutionResponse {
  FinancialInstitution institution = 1;
}

message DeleteInstitutionRequest {
  string code = 1;                            // Required
  bool force = 2;                             // Force deletion despite references
  string deleted_by = 3;                      // User making deletion
}

message DeleteInstitutionResponse {
  bool success = 1;
  repeated string blocking_references = 2;    // What prevents deletion
}

message ListInstitutionsRequest {
  InstitutionStatus status = 1;               // Filter by status
  InstitutionType institution_type = 2;       // Filter by type
  string country_code = 3;                    // Filter by country
  bool is_active = 4;                         // Filter by active flag
  int32 page_size = 5;                        // Pagination
  string page_token = 6;                      // Pagination token
}

message ListInstitutionsResponse {
  repeated FinancialInstitution institutions = 1;
  string next_page_token = 2;
  int32 total_count = 3;
}

message CheckInstitutionReferencesRequest {
  string code = 1;                            // Institution to check
}

message CheckInstitutionReferencesResponse {
  message Reference {
    string table_name = 1;
    string column_name = 2;
    int32 count = 3;
  }
  repeated Reference references = 1;
  bool can_delete = 2;                        // True if no references
}

message BulkCreateInstitutionsRequest {
  repeated CreateInstitutionRequest institutions = 1;
  bool skip_duplicates = 2;                   // Skip existing institutions
  bool update_existing = 3;                   // Update if exists
}

message BulkCreateInstitutionsResponse {
  int32 created_count = 1;
  int32 updated_count = 2;
  int32 skipped_count = 3;
  repeated string errors = 4;
}
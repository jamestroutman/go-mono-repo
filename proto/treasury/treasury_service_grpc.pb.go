// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0--rc2
// source: services/treasury-services/treasury-service/proto/treasury_service.proto

package treasury

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Manifest_GetManifest_FullMethodName = "/treasury.Manifest/GetManifest"
)

// ManifestClient is the client API for Manifest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Spec: docs/specs/001-manifest.md
type ManifestClient interface {
	// GetManifest returns comprehensive service metadata
	GetManifest(ctx context.Context, in *ManifestRequest, opts ...grpc.CallOption) (*ManifestResponse, error)
}

type manifestClient struct {
	cc grpc.ClientConnInterface
}

func NewManifestClient(cc grpc.ClientConnInterface) ManifestClient {
	return &manifestClient{cc}
}

func (c *manifestClient) GetManifest(ctx context.Context, in *ManifestRequest, opts ...grpc.CallOption) (*ManifestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ManifestResponse)
	err := c.cc.Invoke(ctx, Manifest_GetManifest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManifestServer is the server API for Manifest service.
// All implementations must embed UnimplementedManifestServer
// for forward compatibility.
//
// Spec: docs/specs/001-manifest.md
type ManifestServer interface {
	// GetManifest returns comprehensive service metadata
	GetManifest(context.Context, *ManifestRequest) (*ManifestResponse, error)
	mustEmbedUnimplementedManifestServer()
}

// UnimplementedManifestServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedManifestServer struct{}

func (UnimplementedManifestServer) GetManifest(context.Context, *ManifestRequest) (*ManifestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetManifest not implemented")
}
func (UnimplementedManifestServer) mustEmbedUnimplementedManifestServer() {}
func (UnimplementedManifestServer) testEmbeddedByValue()                  {}

// UnsafeManifestServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManifestServer will
// result in compilation errors.
type UnsafeManifestServer interface {
	mustEmbedUnimplementedManifestServer()
}

func RegisterManifestServer(s grpc.ServiceRegistrar, srv ManifestServer) {
	// If the following call pancis, it indicates UnimplementedManifestServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Manifest_ServiceDesc, srv)
}

func _Manifest_GetManifest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManifestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManifestServer).GetManifest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manifest_GetManifest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManifestServer).GetManifest(ctx, req.(*ManifestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Manifest_ServiceDesc is the grpc.ServiceDesc for Manifest service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manifest_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "treasury.Manifest",
	HandlerType: (*ManifestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetManifest",
			Handler:    _Manifest_GetManifest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/treasury-services/treasury-service/proto/treasury_service.proto",
}

const (
	Health_GetLiveness_FullMethodName = "/treasury.Health/GetLiveness"
	Health_GetHealth_FullMethodName   = "/treasury.Health/GetHealth"
)

// HealthClient is the client API for Health service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HealthClient interface {
	// GetLiveness checks if the service is alive and ready to accept traffic
	// Should be used by load balancers and orchestrators
	// Spec: docs/specs/003-health-check-liveness.md#story-1-service-liveness-check
	GetLiveness(ctx context.Context, in *LivenessRequest, opts ...grpc.CallOption) (*LivenessResponse, error)
	// GetHealth performs comprehensive health check including dependencies
	// Should be used for monitoring and debugging
	// Spec: docs/specs/003-health-check-liveness.md#story-2-dependency-health-monitoring
	GetHealth(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
}

type healthClient struct {
	cc grpc.ClientConnInterface
}

func NewHealthClient(cc grpc.ClientConnInterface) HealthClient {
	return &healthClient{cc}
}

func (c *healthClient) GetLiveness(ctx context.Context, in *LivenessRequest, opts ...grpc.CallOption) (*LivenessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LivenessResponse)
	err := c.cc.Invoke(ctx, Health_GetLiveness_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthClient) GetHealth(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, Health_GetHealth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HealthServer is the server API for Health service.
// All implementations must embed UnimplementedHealthServer
// for forward compatibility.
type HealthServer interface {
	// GetLiveness checks if the service is alive and ready to accept traffic
	// Should be used by load balancers and orchestrators
	// Spec: docs/specs/003-health-check-liveness.md#story-1-service-liveness-check
	GetLiveness(context.Context, *LivenessRequest) (*LivenessResponse, error)
	// GetHealth performs comprehensive health check including dependencies
	// Should be used for monitoring and debugging
	// Spec: docs/specs/003-health-check-liveness.md#story-2-dependency-health-monitoring
	GetHealth(context.Context, *HealthRequest) (*HealthResponse, error)
	mustEmbedUnimplementedHealthServer()
}

// UnimplementedHealthServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHealthServer struct{}

func (UnimplementedHealthServer) GetLiveness(context.Context, *LivenessRequest) (*LivenessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLiveness not implemented")
}
func (UnimplementedHealthServer) GetHealth(context.Context, *HealthRequest) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHealth not implemented")
}
func (UnimplementedHealthServer) mustEmbedUnimplementedHealthServer() {}
func (UnimplementedHealthServer) testEmbeddedByValue()                {}

// UnsafeHealthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HealthServer will
// result in compilation errors.
type UnsafeHealthServer interface {
	mustEmbedUnimplementedHealthServer()
}

func RegisterHealthServer(s grpc.ServiceRegistrar, srv HealthServer) {
	// If the following call pancis, it indicates UnimplementedHealthServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Health_ServiceDesc, srv)
}

func _Health_GetLiveness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LivenessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServer).GetLiveness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Health_GetLiveness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServer).GetLiveness(ctx, req.(*LivenessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Health_GetHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServer).GetHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Health_GetHealth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServer).GetHealth(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Health_ServiceDesc is the grpc.ServiceDesc for Health service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Health_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "treasury.Health",
	HandlerType: (*HealthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLiveness",
			Handler:    _Health_GetLiveness_Handler,
		},
		{
			MethodName: "GetHealth",
			Handler:    _Health_GetHealth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/treasury-services/treasury-service/proto/treasury_service.proto",
}

const (
	CurrencyService_CreateCurrency_FullMethodName       = "/treasury.CurrencyService/CreateCurrency"
	CurrencyService_GetCurrency_FullMethodName          = "/treasury.CurrencyService/GetCurrency"
	CurrencyService_UpdateCurrency_FullMethodName       = "/treasury.CurrencyService/UpdateCurrency"
	CurrencyService_DeactivateCurrency_FullMethodName   = "/treasury.CurrencyService/DeactivateCurrency"
	CurrencyService_ListCurrencies_FullMethodName       = "/treasury.CurrencyService/ListCurrencies"
	CurrencyService_BulkCreateCurrencies_FullMethodName = "/treasury.CurrencyService/BulkCreateCurrencies"
)

// CurrencyServiceClient is the client API for CurrencyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Currency service for managing ISO 4217 compliant currencies
type CurrencyServiceClient interface {
	// Create a new currency
	// Spec: docs/specs/003-currency-management.md#story-1-create-new-currency
	CreateCurrency(ctx context.Context, in *CreateCurrencyRequest, opts ...grpc.CallOption) (*CreateCurrencyResponse, error)
	// Get currency information
	// Spec: docs/specs/003-currency-management.md#story-2-query-currency-information
	GetCurrency(ctx context.Context, in *GetCurrencyRequest, opts ...grpc.CallOption) (*GetCurrencyResponse, error)
	// Update currency metadata
	// Spec: docs/specs/003-currency-management.md#story-3-update-currency-metadata
	UpdateCurrency(ctx context.Context, in *UpdateCurrencyRequest, opts ...grpc.CallOption) (*UpdateCurrencyResponse, error)
	// Deactivate currency (soft delete only - hard delete not supported)
	// Spec: docs/specs/003-currency-management.md#story-4-deactivate-currency
	DeactivateCurrency(ctx context.Context, in *DeactivateCurrencyRequest, opts ...grpc.CallOption) (*DeactivateCurrencyResponse, error)
	// List currencies with filters
	// Spec: docs/specs/003-currency-management.md#story-2-query-currency-information
	ListCurrencies(ctx context.Context, in *ListCurrenciesRequest, opts ...grpc.CallOption) (*ListCurrenciesResponse, error)
	// Bulk create currencies
	// Spec: docs/specs/003-currency-management.md#story-5-bulk-currency-operations
	BulkCreateCurrencies(ctx context.Context, in *BulkCreateCurrenciesRequest, opts ...grpc.CallOption) (*BulkCreateCurrenciesResponse, error)
}

type currencyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCurrencyServiceClient(cc grpc.ClientConnInterface) CurrencyServiceClient {
	return &currencyServiceClient{cc}
}

func (c *currencyServiceClient) CreateCurrency(ctx context.Context, in *CreateCurrencyRequest, opts ...grpc.CallOption) (*CreateCurrencyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCurrencyResponse)
	err := c.cc.Invoke(ctx, CurrencyService_CreateCurrency_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyServiceClient) GetCurrency(ctx context.Context, in *GetCurrencyRequest, opts ...grpc.CallOption) (*GetCurrencyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCurrencyResponse)
	err := c.cc.Invoke(ctx, CurrencyService_GetCurrency_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyServiceClient) UpdateCurrency(ctx context.Context, in *UpdateCurrencyRequest, opts ...grpc.CallOption) (*UpdateCurrencyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCurrencyResponse)
	err := c.cc.Invoke(ctx, CurrencyService_UpdateCurrency_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyServiceClient) DeactivateCurrency(ctx context.Context, in *DeactivateCurrencyRequest, opts ...grpc.CallOption) (*DeactivateCurrencyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeactivateCurrencyResponse)
	err := c.cc.Invoke(ctx, CurrencyService_DeactivateCurrency_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyServiceClient) ListCurrencies(ctx context.Context, in *ListCurrenciesRequest, opts ...grpc.CallOption) (*ListCurrenciesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCurrenciesResponse)
	err := c.cc.Invoke(ctx, CurrencyService_ListCurrencies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyServiceClient) BulkCreateCurrencies(ctx context.Context, in *BulkCreateCurrenciesRequest, opts ...grpc.CallOption) (*BulkCreateCurrenciesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BulkCreateCurrenciesResponse)
	err := c.cc.Invoke(ctx, CurrencyService_BulkCreateCurrencies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CurrencyServiceServer is the server API for CurrencyService service.
// All implementations must embed UnimplementedCurrencyServiceServer
// for forward compatibility.
//
// Currency service for managing ISO 4217 compliant currencies
type CurrencyServiceServer interface {
	// Create a new currency
	// Spec: docs/specs/003-currency-management.md#story-1-create-new-currency
	CreateCurrency(context.Context, *CreateCurrencyRequest) (*CreateCurrencyResponse, error)
	// Get currency information
	// Spec: docs/specs/003-currency-management.md#story-2-query-currency-information
	GetCurrency(context.Context, *GetCurrencyRequest) (*GetCurrencyResponse, error)
	// Update currency metadata
	// Spec: docs/specs/003-currency-management.md#story-3-update-currency-metadata
	UpdateCurrency(context.Context, *UpdateCurrencyRequest) (*UpdateCurrencyResponse, error)
	// Deactivate currency (soft delete only - hard delete not supported)
	// Spec: docs/specs/003-currency-management.md#story-4-deactivate-currency
	DeactivateCurrency(context.Context, *DeactivateCurrencyRequest) (*DeactivateCurrencyResponse, error)
	// List currencies with filters
	// Spec: docs/specs/003-currency-management.md#story-2-query-currency-information
	ListCurrencies(context.Context, *ListCurrenciesRequest) (*ListCurrenciesResponse, error)
	// Bulk create currencies
	// Spec: docs/specs/003-currency-management.md#story-5-bulk-currency-operations
	BulkCreateCurrencies(context.Context, *BulkCreateCurrenciesRequest) (*BulkCreateCurrenciesResponse, error)
	mustEmbedUnimplementedCurrencyServiceServer()
}

// UnimplementedCurrencyServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCurrencyServiceServer struct{}

func (UnimplementedCurrencyServiceServer) CreateCurrency(context.Context, *CreateCurrencyRequest) (*CreateCurrencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCurrency not implemented")
}
func (UnimplementedCurrencyServiceServer) GetCurrency(context.Context, *GetCurrencyRequest) (*GetCurrencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrency not implemented")
}
func (UnimplementedCurrencyServiceServer) UpdateCurrency(context.Context, *UpdateCurrencyRequest) (*UpdateCurrencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCurrency not implemented")
}
func (UnimplementedCurrencyServiceServer) DeactivateCurrency(context.Context, *DeactivateCurrencyRequest) (*DeactivateCurrencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateCurrency not implemented")
}
func (UnimplementedCurrencyServiceServer) ListCurrencies(context.Context, *ListCurrenciesRequest) (*ListCurrenciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCurrencies not implemented")
}
func (UnimplementedCurrencyServiceServer) BulkCreateCurrencies(context.Context, *BulkCreateCurrenciesRequest) (*BulkCreateCurrenciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkCreateCurrencies not implemented")
}
func (UnimplementedCurrencyServiceServer) mustEmbedUnimplementedCurrencyServiceServer() {}
func (UnimplementedCurrencyServiceServer) testEmbeddedByValue()                         {}

// UnsafeCurrencyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CurrencyServiceServer will
// result in compilation errors.
type UnsafeCurrencyServiceServer interface {
	mustEmbedUnimplementedCurrencyServiceServer()
}

func RegisterCurrencyServiceServer(s grpc.ServiceRegistrar, srv CurrencyServiceServer) {
	// If the following call pancis, it indicates UnimplementedCurrencyServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CurrencyService_ServiceDesc, srv)
}

func _CurrencyService_CreateCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyServiceServer).CreateCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CurrencyService_CreateCurrency_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyServiceServer).CreateCurrency(ctx, req.(*CreateCurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrencyService_GetCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyServiceServer).GetCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CurrencyService_GetCurrency_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyServiceServer).GetCurrency(ctx, req.(*GetCurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrencyService_UpdateCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyServiceServer).UpdateCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CurrencyService_UpdateCurrency_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyServiceServer).UpdateCurrency(ctx, req.(*UpdateCurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrencyService_DeactivateCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactivateCurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyServiceServer).DeactivateCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CurrencyService_DeactivateCurrency_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyServiceServer).DeactivateCurrency(ctx, req.(*DeactivateCurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrencyService_ListCurrencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCurrenciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyServiceServer).ListCurrencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CurrencyService_ListCurrencies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyServiceServer).ListCurrencies(ctx, req.(*ListCurrenciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrencyService_BulkCreateCurrencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkCreateCurrenciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyServiceServer).BulkCreateCurrencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CurrencyService_BulkCreateCurrencies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyServiceServer).BulkCreateCurrencies(ctx, req.(*BulkCreateCurrenciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CurrencyService_ServiceDesc is the grpc.ServiceDesc for CurrencyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CurrencyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "treasury.CurrencyService",
	HandlerType: (*CurrencyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCurrency",
			Handler:    _CurrencyService_CreateCurrency_Handler,
		},
		{
			MethodName: "GetCurrency",
			Handler:    _CurrencyService_GetCurrency_Handler,
		},
		{
			MethodName: "UpdateCurrency",
			Handler:    _CurrencyService_UpdateCurrency_Handler,
		},
		{
			MethodName: "DeactivateCurrency",
			Handler:    _CurrencyService_DeactivateCurrency_Handler,
		},
		{
			MethodName: "ListCurrencies",
			Handler:    _CurrencyService_ListCurrencies_Handler,
		},
		{
			MethodName: "BulkCreateCurrencies",
			Handler:    _CurrencyService_BulkCreateCurrencies_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/treasury-services/treasury-service/proto/treasury_service.proto",
}
